Set 1
1)program pattern(cross pattern)

public class patt
{
public static void main(String args[])
{
int temp=6;
String str="program";
for(int i=0;i<7;i++)
{
for(int j=0;j<7;j++)
{
System.out.print(" ");
if(i==j&&i!=3)
System.out.print(str.charAt(j));
if(j==temp)
{
System.out.print(str.charAt(j));
temp--;
}
}
System.out.println();
}
}
} 


2)Calculating weights for an array

import java.util.Arrays;
import java.util.Comparator;

public class practise
{
    public static void main(String args[])
    {
        int[] arr={10,36,54,89,12};
        int[][] ans=new int[arr.length][2];
        int in=0;
        
        for(int i=0;i<arr.length;i++)
        {
            int weight=0;
            if(perfect(arr[i]))
            weight+=5;
            if(arr[i]%4==0&& arr[i]%6==0)
            weight+=4;
            if(arr[i]%2==0)
            weight+=3;
            ans[in][0]=arr[i];
            ans[in++][1]=weight;
        }
          Arrays.sort(ans,Comparator.comparingInt(a->a[1]));
          for(int i=0;i<arr.length;i++)
          {
            for(int j=0;j<2;j++)
            {
                System.out.print(ans[i][j] +"  ");
            }
            System.out.println();
          }
        
        
        
    }
    public static  boolean perfect(int n)
    {
        int start=1,stop=n/2;
        while(start<=stop)
        {
            int mid=start+(stop-start)/2;
            if(mid*mid==n)
            return true;
            else if(mid*mid<n)
            start=mid+1;
            else
            stop=mid-1;
        }
        return false;
    }
}


output:
89  0
10  3
54  3
12  7
36  12


3)column traversal and row traversal to search a substring in an array




public class practise
{
    public static void main(String args[])
    {
        String s="welcometozohocorporation";
        Character[][] a=new Character[5][5];// next perfect square to maintain n X n matrix
        int l=-1;
       for(int i=0;i<a.length;i++)
        {
            for(int k=0;k<a[0].length;k++)
            {
                if(l!=s.length()-1)
                a[i][k]=s.charAt(++l);
                else
                a[i][k]=' ';
        }
        }
        for(int i=0;i<a.length;i++)
        {
            for(int k=0;k<a[0].length-2;k++)
            {
                int k1=k;
                if(a[i][k]=='t')
                {
                    if(a[i][++k]=='o')
                    {
                        if(a[i][++k]=='o')
                        {
                          System.out.print(i+","+k1+" ");
                          System.out.println(i+","+k);
                        }
                        
                    }
                }
               
            }
        }
         for(int i=0;i<a[0].length;i++)
        {
            for(int k=0;k<a.length-2;k++)
            {
                int k1=k;
                if(a[k][i]=='t')
                {
                    if(a[++k][i]=='o')
                    {
                        if(a[++k][i]=='o')
                        {
                                    System.out.print(k1+","+i+" ");
                                    System.out.println(k+","+i);
                        }
                        
                    }
                }
            }
        }
    }
}

output:
w e l c o 
m e t o z
o h o c o
r p o r a
t i o n 
 
1,2 3,2

4)suduko problem
//refernce kunal Kushwaha channel

class suduko {
    public static void main(String args[]) {
        int[][] board = { { 5, 3, 0, 0, 7, 0, 0, 0, 0 }, { 6, 0, 0, 1, 9, 5, 0, 0, 0 }, { 0, 9, 8, 0, 0, 0, 0, 6, 0 },
                { 8, 0, 0, 0, 6, 0, 0, 0, 3 }, { 4, 0, 0, 8, 0, 3, 0, 0, 1 }, { 7, 0, 0, 0, 2, 0, 0, 0, 6 },
                { 0, 6, 0, 0, 0, 0, 2, 8, 0 }, { 0, 0, 0, 4, 1, 9, 0, 0, 5 }, { 0, 0, 0, 0, 8, 0, 0, 7, 9 } };

        if (solve(board))
            display(board);
        else
            System.out.println("can't solve");
    }

    static boolean solve(int[][] board) {
        int n = board.length;
        int r = -1, c = -1;
        boolean emptyleft = true;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 0) {
                    r = i;
                    c = j;
                    emptyleft = false;
                    break;
                }
            }
            if (emptyleft == false)
                break;
        }
        if (emptyleft == true)
            return true;
        for (int i = 1; i <= 9; i++) {
            if (issafe(board, r, c, i)) {
                board[r][c] = i;
                if (solve(board)) {

                    return true;
                } else
                    board[r][c] = 0;
            }
        }
        return false;
    }

    static void display(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }

    static boolean issafe(int[][] board, int r, int c, int n) {
        for (int i = 0; i < board.length; i++) {
            if (board[r][c] == n)
                return false;
        }
        for (int[] i : board) {
            if (i[c] == n)
                return false;
        }
        int sqrt = (int) (Math.sqrt(board.length));
        int rs = r - r % sqrt;
        int cs = c - c % sqrt;
        for (int i = rs; i < rs + sqrt; i++) {
            for (int j = cs; j < cs + sqrt; j++) {
                if (board[i][j] == n)
                    return false;
            }
        }
        return true;
    }
}



5)Number of grandchildren



public class practise
{
    public static void main(String args[])
    {
        String[][] s=new String[4][2];
        s[0][0]="luke";
        s[0][1]="shaw";
        s[1][0]="wayne";
        s[1][1]="rooney";
        s[2][0]="rooney";
        s[2][1]="ronaldo";
        s[3][0]="shaw";
        s[3][1]="rooney";
        String target="rooney";
        String son="";
        for(int i=0;i<s.length;i++)
        {
             if(s[i][1].equals(target))
               son=s[i][0];

        }
        int count=0;
        for(int i=0;i<s.length;i++)
        {
             if(s[i][1].equals(son))
               count++;

        }
        System.out.println(count);

    }
}

output:
2

