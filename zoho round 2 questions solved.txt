1)Between 2 sets

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    public static int getTotalX(List<Integer> a, List<Integer> b) {
    // Write your code here
     int result = 0;

    // Get LCM of all elements of a
    int lcm = a.get(0);
    for (Integer integer : a) {
      lcm = getLCM(lcm, integer);
    }

    // Get GCD of all elements of b
    int gcd = b.get(0);
    for (Integer integer : b) {
      gcd = getGCD(gcd, integer);
    }

    // Count multiples of lcm that divide the gcd
    int multiple = 0;
    while (multiple <= gcd) {
      multiple += lcm;

      if (gcd % multiple == 0)
        result++;
    }

    return result;
  }
    static int getGCD(int n1, int n2) {
    if (n2 == 0) {
      return n1;
    }
    return getGCD(n2, n1 % n2);
  }

  static int getLCM(int n1, int n2) {
    if (n1 == 0 || n2 == 0)
      return 0;
    else {
      int gcd = getGCD(n1, n2);
      return Math.abs(n1 * n2) / gcd;
    }
  }

    }


2)Grading students

  public static List<Integer> gradingStudents(List<Integer> grades) {
    // Write your code here
    List<Integer> ans=new ArrayList<>();
    for(Integer i:grades)
    {
        if(i>=38&&i%5>=3)
        ans.add(i+(5-(i%5)));
        else
        ans.add(i);
    }
    return ans;

    }

}

3)Sales by Match

  public static int sockMerchant(int n, List<Integer> ar) {
    // Write your code here
    Collections.sort(ar);
    int count=0;
    for(int i=0;i<ar.size();i++)
    {
    if(i!=ar.size()-1&&ar.get(i)==ar.get(i+1))
    {
        count++;
        i++;
    }
    }
    return count;
    }

}

4)Angry professor

 public static String angryProfessor(int k, List<Integer> a) {
    // Write your code here
    Collections.sort(a);
    int count=0;
    for(int i=0;i<a.size();i++)
    {
        if(a.get(i)<=0)
        count++;
        else
        break;
    }
    if(count>=k)
    return "NO";
    else
    return "YES";

    }

}

5)Find digits

public static int findDigits(int n) {
    // Write your code here
    int num=n,count=0;
    while(n>0)
    {
        int r=n%10;
        if(r!=0&&num%r==0)
        count++;
        n=n/10;
    }
    return count;

    }

}

6)Sherlock and squares

 public static int squares(int a, int b) {
    // Write your code here
    int count=0;
   for(int i=(int)Math.ceil(Math.sqrt(a));i<=Math.floor(Math.sqrt(b));i++)
   {
    if(i*i>=a&&i*i<=b)
    count++;
    
   }
   return count;
    }

}

7)Cut the sticks

 public static List<Integer> cutTheSticks(List<Integer> arr) {
    // Write your code here
    
    List<Integer> ans=new ArrayList<>();
    Collections.sort(arr);
    
    HashMap<Integer,Integer> map=new HashMap<>();
    for(int i=0;i<arr.size();i++)
    {
        if(map.containsKey(arr.get(i)))
        {
            map.put(arr.get(i),map.get(arr.get(i))+1);
        }
        else
        map.put(arr.get(i),1);
    }
    int l=arr.size();
    for(Integer v:map.keySet())
    {
        if(l>1)
        ans.add(l);
        else
        break;
        l=l-v;
    }
    return ans;
    
    }
    
}
8)Jumping on the clouds

public static int jumpingOnClouds(List<Integer> c) {
    // Write your code here
     int count = 0;  // Start from cloud 0, so the count is initialized as 0
    int i = 0;      // Start at the first cloud (index 0)
    
    while (i < c.size() - 1) {
        // Try to make a jump of 2 steps if possible (to cloud i + 2)
        if (i + 2 < c.size() && c.get(i + 2) == 0) {
            i += 2;  // Jump to cloud i + 2
        } else {
            i += 1;  // Otherwise, jump to cloud i + 1
        }
        count++;  // Increase the jump count
    }
    
    return count;  

    }
}

9)Hallowing sales

public static int howManyGames(int p, int d, int m, int s) {
    // Return the number of games you can buy
    int sum=p,count=1;
    if(sum>s)
    return 0;
    while(true)
    {
        
        p=Math.max(m,p-d);
        
        sum+=p;
        if(sum<=s)
        count++;
        else
        break;
    }
    
    return count;

    }

}


