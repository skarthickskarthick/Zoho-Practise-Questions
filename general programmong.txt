****TCS QN******  
1)check if the strings are rotated
s=abc t=bca

class Solution {
    public boolean isAnagram(String s, String t) {
       
        if((s+s).indexOf(t)==-1)
        return false;
      
        return true;
    }
}
//s=abc t=bca for rotated strings only not for  all anagrams


2)symmetric array elements

public class symmetric {
	public static void main(String args[])
	{
  int arr[][]= {{1,2},{2,1},{3,4},{4,3} };
  for(int i=0;i<arr.length-1;i++)
  {
	  if(arr[i][0]==arr[i+1][1]&&arr[i][1]==arr[i+1][0])
	  {
		  System.out.println(arr[i][0]+" "+arr[i][1]);
		  i++;
	  }
  }
	}
} 

output:
1,2  3,4




3)sorting based on frequency


import java.util.*;

public class sorting {
public static void main(String args[])
{
	int arr[]= {2,2,2,2,3,3,3,1,1,0};
	HashMap<Integer,Integer> m=new HashMap<>();
	for(int i=0;i<arr.length;i++)
	{
		if(!m.containsKey(arr[i]))
			m.put(arr[i],1);
		else
			m.put(arr[i], m.get(arr[i])+1);
	}
	 List<List<Integer>> l=new ArrayList<>();
	 for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
         ArrayList<Integer> row = new ArrayList<>();
         row.add(entry.getValue());
         row.add(entry.getKey());
         
         l.add(row);
     }
	 
	 Collections.sort(l,(b,a)->a.get(0).compareTo(b.get(0)));
	 System.out.println(l);
	 for(int i=0;i<l.size();i++)
	 {
		 
		 for(int j=0;j<l.get(i).get(0);j++)
		 System.out.print(l.get(i).get(1)+" ");
	 }
}
}

output:

4,2 3,3 1,2 0,1=== l







4) ****TCS***

3. Longest Substring Without Repeating Characters

2 pointer and sliding window method:


class Solution {
    public int lengthOfLongestSubstring(String s) {
      Set<Character> set=new HashSet<>();
        
        int l=0,r=0,length=0,max=0;
        char c[]=new char[26];
        while(r<s.length())
        {
           
            while(set.contains(s.charAt(r)))
            {
                set.remove(s.charAt(l));
             l++;   
            }
          set.add(s.charAt(r));
            length=r-l+1;
           max= Math.max(max,length);
           
            r++;
        }
        return max;
    }
}



5)930. Binary Subarrays With Sum


class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        // to count  number of exact goal count subarrays
        return count(nums, goal) - count(nums, goal - 1);
    }

    int count(int[] nums, int goal) {
        int left = 0, sum = 0, count = 0;
         if(goal<0)
         return 0;
        // Iterate through the array using the right pointer
        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];  // Add the current element to the sum
         
            // Shrink the window from the left if sum exceeds the goal
            while (sum > goal) {
                sum -= nums[left];
                left++;
            }

            // counts the number of subarrays with sum less than or equal to goal
            count += right - left + 1;
        }
        
        return count;
    }
}





6)Anagrams

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length())
        return false;
      int min=Integer.MAX_VALUE, max=Integer.MIN_VALUE;
       for(char c:s.toCharArray())
       {
        max=Math.max(max,c);
        min=Math.min(c,min);
       }
       for(char c:t.toCharArray())
       {
        max=Math.max(max,c);
        min=Math.min(c,min);
       
       }
       int sarr[]=new int[max-min+1];
        for(int i=0;i<s.length();i++)
        {
            sarr[s.charAt(i)-min]++;
            sarr[t.charAt(i)-min]--;
        }
        for(int i:sarr)
        {
        if(i!=0)
        return false;
        }
        return true;
         }
}

(or)

class AnagramOptimized2 {

    static String a = "listenl6&6";
    static String b = "s66ille&nt";

    public static void main(String[] args) {

        if (a.length() != b.length()) {
            System.out.println("Not a valid Anagram");
            return;
        }

        int m = a.length();
        int[] map = new int[m];

        for (int i = 0; i < m; i++) {
            int index = a.indexOf(a.charAt(i));
            map[index] += 1;
        }

        for (int i = 0; i < m; i++) {
            int index = a.indexOf(b.charAt(i));
            if (index == -1) {
                System.out.print("Not a valid Anagram");
                return;
            }
            map[index] -= 1;
        }

        for (int i = 0; i < map.length; i++) {
            if (map[i] != 0) {
                System.err.println("Not a valid Anagram");
                return;
            }
        }
        System.out.println("Valid Anagram");
    }
}






7)roman to integer


class Solution {
    public int romanToInt(String s) {
        int sum=0;
        int first=func(s.charAt(0));
        for(int i=1;i<s.length();i++)
        {
            int temp=func(s.charAt(i));
            if(first<temp)
            sum-=first;
            else
            sum+=first;
            first=temp;
        }
        sum+=first;
        return sum;
    }
    int func(char c)
    {
        switch(c)
        {
            case 'I':
            return 1;
            case 'V':
            return 5;
            case 'X':
            return 10;
            case 'L':
            return 50;
            case 'C':
            return 100;
            case 'D':
            return 500;
            case 'M':
            return 1000;
            default:
            return 0;
        }
    }
}



8)12. Integer to Roman



class Solution {
    public String intToRoman(int num) {
        int intcode[]={1000,900,500,400,100,90,50,40,10,9,5,4,1};
        String code[]={"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<intcode.length;i++)
        {
            while(num>=intcode[i])
            {
                sb.append(code[i]);
                num-=intcode[i];
            }
        }
        return sb.toString();
    }
}


9)partitioning the number to bd


// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;
public class PartioningNumberToBD {

    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);
        System.out.println("enter the value :");
        int value = scan.nextInt();
        int[] array = convertToBD(value);
        for (int data : array) {
            if (data == 0)
                break;
            System.out.print(data + " ");
        }
        System.out.println();
    }

    private static int[] convertToBD(int value) {
        // create the empty array
        int binaryArray[] = new int[9];
        int base = 1;
        while (value != 0) {
            int lastDigit = value % 10;
            value = value / 10;
            insertToBinaryArray(binaryArray, lastDigit, base);
            base = base * 10;
        }
        return binaryArray;
    }

    private static void insertToBinaryArray(int[] binaryArray, int lastDigit, int base) {
        for (int i = 0; i < lastDigit; i++) {
            binaryArray[i] += 1 * base;
        }
    }

}

input: 631

output: 111 110 110 100 100 100


10)941. Valid Mountain Array

class Solution {
    public boolean validMountainArray(final int[] arr) {
        final int n = arr.length;
        int i = 0, j = n - 1;
        while (i + 1 < n && arr[i] < arr[i + 1]) i++;
        while (j > 0 && arr[j - 1] > arr[j]) j--;
        return i > 0 && i == j && j < n - 1;
    }
}

(or)

class Solution {
    public boolean validMountainArray(int[] arr) {
        int peakindex=0;
        for( int i=0;i<arr.length-1;i++)
        {
            if(arr[i]>arr[i+1]){
             peakindex=i+1;
             break;}
             else if(arr[i]==arr[i+1])
             return false;
            
            
        }
        if(peakindex==0||peakindex==1)
        return false;
        for(int i=peakindex;i<arr.length-1;i++)
        {
            if(arr[i]<arr[i+1])
            return false;
             else if(arr[i]==arr[i+1])
             return false;
        }
        System.out.println(peakindex);
        return true;
    }
}



11)missing in a array

n=5 arr={1,3,2,5} ans=4


class Solution {

    // Note that the size of the array is n-1
    int missingNumber(int n, int arr[]) {

        // Your Code Here
        int sum=0,total=0;
        for(int i:arr)
        {
            sum+=i;
        }
        for(int i=1;i<=n;i++)
        {
            total+=i;
        }
        return total-sum;
    }
}


12)printing char for given number of times

package programs;

public class printcharfornumberofteimes {
    public static void main(String args[])
    {
        String s="a23b10c20";
        int n=0;

        char[] chararr=s.toCharArray();

        for(int i=0;i<chararr.length;i++)
        {



            if(i!=0&&Character.isDigit(chararr[i])&&Character.isDigit(chararr[i-1]))
            {
                n=((chararr[i-1]-'0')*10)+chararr[i]-'0';

                for(int j=0;j<n;j++)
                    System.out.print(chararr[i-2]+"");
                i++;

            }
           else if(i!=chararr.length-1&&Character.isDigit(chararr[i])&&!Character.isDigit(chararr[i+1]))
            {
                n=chararr[i]-'0';
                for(int j=0;j<n;j++)
                    System.out.print(chararr[i-1]+"");
                i++;

            }




        }
    }
}


